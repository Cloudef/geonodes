#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on 2024/07/26

@author: alain

-----------------------------------------------------
geonodes module
- Scripting Geometry Nodes
-----------------------------------------------------

module : staticclass
--------------------
- Functional nodes

Functional nodes are nodes which can't be considered as methods or properties of a data class.
Functional nodes also include input nodes such as 'Position' or 'Index'. Theses nodes should be considered
as properties of geometry but to ease the scripting, there are also implemented as functions.

Functional nodes are implemented as static functions and properties or a class named nd which is short.

```  python
# Some functional nodes
pos = nd.position
i = nd.index
attr = named_attribute(name, 'FLOAT')
```

classes
-------
- Texture       : Implements the texture nodes creation
    - Brick
    - Checker
    - Gradient
    - Image
    - Magic
    - Noise
    - Voronoi
    - Wave
    - WhiteNoise


functions
---------

updates
-------
- creation : 2024/07/23
"""

import numpy as np

import bpy
from .treeclass import Node

def get_object(obj):
    if obj is None:
        return None
    elif isinstance(obj, str):
        return bpy.data.objects.get(obj)
    else:
        return obj

# =============================================================================================================================
# Automatically generated by node_explore.gen_static_class:
"""
from importlib import reload

from geonodes.script import node_explore
reload(node_explore)

node_explore.gen_static_class()
"""

class StaticClass:

    @classmethod
    def frame(cls, label_size=20, shrink=True, text=None):
        """ Node 'Frame' (NodeFrame)
        """

        node = Node('Frame', label_size=label_size, shrink=shrink, text=text)
        return node._out


    @classmethod
    @property
    def group_input(cls):
        """ Node 'Group Input' (NodeGroupInput)
        """

        node = Node('Group Input')
        return node._out


    @classmethod
    def group_output(cls, is_active_output=True):
        """ Node 'Group Output' (NodeGroupOutput)
        """

        node = Node('Group Output', is_active_output=is_active_output)
        return node._out


    @classmethod
    def reroute(cls, input=None):
        """ Node 'Reroute' (NodeReroute)
        """

        node = Node('Reroute', {'Input': input})
        return node._out


    @classmethod
    def add_shader(cls, shader=None, shader_1=None):
        """ Node 'Add Shader' (ShaderNodeAddShader)
        """

        node = Node('Add Shader', {'Shader': shader, 'Shader_001': shader_1})
        return node._out


    @classmethod
    def ambient_occlusion(cls, color=None, distance=None, normal=None, inside=False, only_local=False, samples=16):
        """ Node 'Ambient Occlusion' (ShaderNodeAmbientOcclusion)
        """

        node = Node('Ambient Occlusion', {'Color': color, 'Distance': distance, 'Normal': normal}, inside=inside, only_local=only_local, samples=samples)
        return node


    @classmethod
    def attribute(cls, attribute_name='', attribute_type='GEOMETRY'):
        """ Node 'Attribute' (ShaderNodeAttribute)
        - attribute_type in ('GEOMETRY', 'OBJECT', 'INSTANCER', 'VIEW_LAYER')
        """

        node = Node('Attribute', attribute_name=attribute_name, attribute_type=attribute_type)
        return node


    @classmethod
    def background(cls, color=None, strength=None):
        """ Node 'Background' (ShaderNodeBackground)
        """

        node = Node('Background', {'Color': color, 'Strength': strength})
        return node._out


    @classmethod
    def bevel(cls, radius=None, normal=None, samples=4):
        """ Node 'Bevel' (ShaderNodeBevel)
        """

        node = Node('Bevel', {'Radius': radius, 'Normal': normal}, samples=samples)
        return node._out


    @classmethod
    def blackbody(cls, temperature=None):
        """ Node 'Blackbody' (ShaderNodeBlackbody)
        """

        node = Node('Blackbody', {'Temperature': temperature})
        return node._out


    @classmethod
    def brightness_contrast(cls, color=None, bright=None, contrast=None):
        """ Node 'Brightness/Contrast' (ShaderNodeBrightContrast)
        """

        node = Node('Brightness/Contrast', {'Color': color, 'Bright': bright, 'Contrast': contrast})
        return node._out


    @classmethod
    def glossy_bsdf(cls, color=None, roughness=None, anisotropy=None, rotation=None, normal=None, tangent=None, distribution='MULTI_GGX'):
        """ Node 'Glossy BSDF' (ShaderNodeBsdfAnisotropic)
        - distribution in ('BECKMANN', 'GGX', 'ASHIKHMIN_SHIRLEY', 'MULTI_GGX')
        """

        node = Node('Glossy BSDF', {'Color': color, 'Roughness': roughness, 'Anisotropy': anisotropy, 'Rotation': rotation, 'Normal': normal, 'Tangent': tangent}, distribution=distribution)
        return node._out


    @classmethod
    def diffuse_bsdf(cls, color=None, roughness=None, normal=None):
        """ Node 'Diffuse BSDF' (ShaderNodeBsdfDiffuse)
        """

        node = Node('Diffuse BSDF', {'Color': color, 'Roughness': roughness, 'Normal': normal})
        return node._out


    @classmethod
    def glass_bsdf(cls, color=None, roughness=None, ior=None, normal=None, distribution='MULTI_GGX'):
        """ Node 'Glass BSDF' (ShaderNodeBsdfGlass)
        - distribution in ('BECKMANN', 'GGX', 'MULTI_GGX')
        """

        node = Node('Glass BSDF', {'Color': color, 'Roughness': roughness, 'IOR': ior, 'Normal': normal}, distribution=distribution)
        return node._out


    @classmethod
    def hair_bsdf(cls, color=None, offset=None, roughnessu=None, roughnessv=None, tangent=None, component='Reflection'):
        """ Node 'Hair BSDF' (ShaderNodeBsdfHair)
        - component in ('Reflection', 'Transmission')
        """

        node = Node('Hair BSDF', {'Color': color, 'Offset': offset, 'RoughnessU': roughnessu, 'RoughnessV': roughnessv, 'Tangent': tangent}, component=component)
        return node._out


    @classmethod
    def principled_hair_bsdf(cls, color=None, roughness=None, radial_roughness=None, coat=None, ior=None, offset=None, random_roughness=None, random=None, model='CHIANG', parametrization='COLOR'):
        """ Node 'Principled Hair BSDF' (ShaderNodeBsdfHairPrincipled)
        - model in ('CHIANG', 'HUANG')
        - parametrization in ('ABSORPTION', 'MELANIN', 'COLOR')
        """

        node = Node('Principled Hair BSDF', {'Color': color, 'Roughness': roughness, 'Radial Roughness': radial_roughness, 'Coat': coat, 'IOR': ior, 'Offset': offset, 'Random Roughness': random_roughness, 'Random': random}, model=model, parametrization=parametrization)
        return node._out


    @classmethod
    def principled_bsdf(cls, base_color=None, metallic=None, roughness=None, ior=None, alpha=None, normal=None, subsurface_weight=None, subsurface_radius=None, subsurface_scale=None, subsurface_anisotropy=None, specular_ior_level=None, specular_tint=None, anisotropic=None, anisotropic_rotation=None, tangent=None, transmission_weight=None, coat_weight=None, coat_roughness=None, coat_ior=None, coat_tint=None, coat_normal=None, sheen_weight=None, sheen_roughness=None, sheen_tint=None, emission_color=None, emission_strength=None, thin_film_thickness=None, thin_film_ior=None, distribution='MULTI_GGX', subsurface_method='RANDOM_WALK'):
        """ Node 'Principled BSDF' (ShaderNodeBsdfPrincipled)
        - distribution in ('GGX', 'MULTI_GGX')
        - subsurface_method in ('BURLEY', 'RANDOM_WALK', 'RANDOM_WALK_SKIN')
        """

        node = Node('Principled BSDF', {'Base Color': base_color, 'Metallic': metallic, 'Roughness': roughness, 'IOR': ior, 'Alpha': alpha, 'Normal': normal, 'Subsurface Weight': subsurface_weight, 'Subsurface Radius': subsurface_radius, 'Subsurface Scale': subsurface_scale, 'Subsurface Anisotropy': subsurface_anisotropy, 'Specular IOR Level': specular_ior_level, 'Specular Tint': specular_tint, 'Anisotropic': anisotropic, 'Anisotropic Rotation': anisotropic_rotation, 'Tangent': tangent, 'Transmission Weight': transmission_weight, 'Coat Weight': coat_weight, 'Coat Roughness': coat_roughness, 'Coat IOR': coat_ior, 'Coat Tint': coat_tint, 'Coat Normal': coat_normal, 'Sheen Weight': sheen_weight, 'Sheen Roughness': sheen_roughness, 'Sheen Tint': sheen_tint, 'Emission Color': emission_color, 'Emission Strength': emission_strength, 'Thin Film Thickness': thin_film_thickness, 'Thin Film IOR': thin_film_ior}, distribution=distribution, subsurface_method=subsurface_method)
        return node._out


    @classmethod
    def ray_portal_bsdf(cls, color=None, position=None, direction=None):
        """ Node 'Ray Portal BSDF' (ShaderNodeBsdfRayPortal)
        """

        node = Node('Ray Portal BSDF', {'Color': color, 'Position': position, 'Direction': direction})
        return node._out


    @classmethod
    def refraction_bsdf(cls, color=None, roughness=None, ior=None, normal=None, distribution='BECKMANN'):
        """ Node 'Refraction BSDF' (ShaderNodeBsdfRefraction)
        - distribution in ('BECKMANN', 'GGX')
        """

        node = Node('Refraction BSDF', {'Color': color, 'Roughness': roughness, 'IOR': ior, 'Normal': normal}, distribution=distribution)
        return node._out


    @classmethod
    def sheen_bsdf(cls, color=None, roughness=None, normal=None, distribution='MICROFIBER'):
        """ Node 'Sheen BSDF' (ShaderNodeBsdfSheen)
        - distribution in ('ASHIKHMIN', 'MICROFIBER')
        """

        node = Node('Sheen BSDF', {'Color': color, 'Roughness': roughness, 'Normal': normal}, distribution=distribution)
        return node._out


    @classmethod
    def toon_bsdf(cls, color=None, size=None, smooth=None, normal=None, component='DIFFUSE'):
        """ Node 'Toon BSDF' (ShaderNodeBsdfToon)
        - component in ('DIFFUSE', 'GLOSSY')
        """

        node = Node('Toon BSDF', {'Color': color, 'Size': size, 'Smooth': smooth, 'Normal': normal}, component=component)
        return node._out


    @classmethod
    def translucent_bsdf(cls, color=None, normal=None):
        """ Node 'Translucent BSDF' (ShaderNodeBsdfTranslucent)
        """

        node = Node('Translucent BSDF', {'Color': color, 'Normal': normal})
        return node._out


    @classmethod
    def transparent_bsdf(cls, color=None):
        """ Node 'Transparent BSDF' (ShaderNodeBsdfTransparent)
        """

        node = Node('Transparent BSDF', {'Color': color})
        return node._out


    @classmethod
    def bump(cls, strength=None, distance=None, height=None, normal=None, invert=False):
        """ Node 'Bump' (ShaderNodeBump)
        """

        node = Node('Bump', {'Strength': strength, 'Distance': distance, 'Height': height, 'Normal': normal}, invert=invert)
        return node._out


    @classmethod
    @property
    def camera_data(cls):
        """ Node 'Camera Data' (ShaderNodeCameraData)
        """

        node = Node('Camera Data')
        return node


    @classmethod
    def clamp(cls, value=None, min=None, max=None, clamp_type='MINMAX'):
        """ Node 'Clamp' (ShaderNodeClamp)
        - clamp_type in ('MINMAX', 'RANGE')
        """

        node = Node('Clamp', {'Value': value, 'Min': min, 'Max': max}, clamp_type=clamp_type)
        return node._out


    @classmethod
    def combine_color(cls, red=None, green=None, blue=None, mode='RGB'):
        """ Node 'Combine Color' (ShaderNodeCombineColor)
        - mode in ('RGB', 'HSV', 'HSL')
        """

        node = Node('Combine Color', {'Red': red, 'Green': green, 'Blue': blue}, mode=mode)
        return node._out


    @classmethod
    def combine_xyz(cls, x=None, y=None, z=None):
        """ Node 'Combine XYZ' (ShaderNodeCombineXYZ)
        """

        node = Node('Combine XYZ', {'X': x, 'Y': y, 'Z': z})
        return node._out


    @classmethod
    def displacement(cls, height=None, midlevel=None, scale=None, normal=None, space='OBJECT'):
        """ Node 'Displacement' (ShaderNodeDisplacement)
        - space in ('OBJECT', 'WORLD')
        """

        node = Node('Displacement', {'Height': height, 'Midlevel': midlevel, 'Scale': scale, 'Normal': normal}, space=space)
        return node._out


    @classmethod
    def specular_bsdf(cls, base_color=None, specular=None, roughness=None, emissive_color=None, transparency=None, normal=None, clear_coat=None, clear_coat_roughness=None, clear_coat_normal=None):
        """ Node 'Specular BSDF' (ShaderNodeEeveeSpecular)
        """

        node = Node('Specular BSDF', {'Base Color': base_color, 'Specular': specular, 'Roughness': roughness, 'Emissive Color': emissive_color, 'Transparency': transparency, 'Normal': normal, 'Clear Coat': clear_coat, 'Clear Coat Roughness': clear_coat_roughness, 'Clear Coat Normal': clear_coat_normal})
        return node._out


    @classmethod
    def emission(cls, color=None, strength=None):
        """ Node 'Emission' (ShaderNodeEmission)
        """

        node = Node('Emission', {'Color': color, 'Strength': strength})
        return node._out


    @classmethod
    def float_curve(cls, factor=None, value=None, mapping=None):
        """ Node 'Float Curve' (ShaderNodeFloatCurve)
        """

        node = Node('Float Curve', {'Factor': factor, 'Value': value}, mapping=mapping)
        return node._out


    @classmethod
    def fresnel(cls, ior=None, normal=None):
        """ Node 'Fresnel' (ShaderNodeFresnel)
        """

        node = Node('Fresnel', {'IOR': ior, 'Normal': normal})
        return node._out


    @classmethod
    def gamma(cls, color=None, gamma=None):
        """ Node 'Gamma' (ShaderNodeGamma)
        """

        node = Node('Gamma', {'Color': color, 'Gamma': gamma})
        return node._out


    @classmethod
    def group(cls, node_tree=None):
        """ Node 'Group' (ShaderNodeGroup)
        """

        node = Node('Group', node_tree=node_tree)
        return node._out


    @classmethod
    @property
    def curves_info(cls):
        """ Node 'Curves Info' (ShaderNodeHairInfo)
        """

        node = Node('Curves Info')
        return node


    @classmethod
    def holdout(cls):
        """ Node 'Holdout' (ShaderNodeHoldout)
        """

        node = Node('Holdout')
        return node._out


    @classmethod
    def hue_saturation_value(cls, hue=None, saturation=None, value=None, fac=None, color=None):
        """ Node 'Hue/Saturation/Value' (ShaderNodeHueSaturation)
        """

        node = Node('Hue/Saturation/Value', {'Hue': hue, 'Saturation': saturation, 'Value': value, 'Fac': fac, 'Color': color})
        return node._out


    @classmethod
    def invert_color(cls, fac=None, color=None):
        """ Node 'Invert Color' (ShaderNodeInvert)
        """

        node = Node('Invert Color', {'Fac': fac, 'Color': color})
        return node._out


    @classmethod
    def layer_weight(cls, blend=None, normal=None):
        """ Node 'Layer Weight' (ShaderNodeLayerWeight)
        """

        node = Node('Layer Weight', {'Blend': blend, 'Normal': normal})
        return node


    @classmethod
    def light_falloff(cls, strength=None, smooth=None):
        """ Node 'Light Falloff' (ShaderNodeLightFalloff)
        """

        node = Node('Light Falloff', {'Strength': strength, 'Smooth': smooth})
        return node


    @classmethod
    @property
    def light_path(cls):
        """ Node 'Light Path' (ShaderNodeLightPath)
        """

        node = Node('Light Path')
        return node


    @classmethod
    def map_range(cls, value=None, from_min=None, from_max=None, to_min=None, to_max=None, clamp=True, data_type='FLOAT', interpolation_type='LINEAR'):
        """ Node 'Map Range' (ShaderNodeMapRange)
        - data_type in ('FLOAT', 'FLOAT_VECTOR')
        - interpolation_type in ('LINEAR', 'STEPPED', 'SMOOTHSTEP', 'SMOOTHERSTEP')
        """

        node = Node('Map Range', {'Value': value, 'From Min': from_min, 'From Max': from_max, 'To Min': to_min, 'To Max': to_max}, clamp=clamp, data_type=data_type, interpolation_type=interpolation_type)
        return node


    @classmethod
    def mapping(cls, vector=None, location=None, rotation=None, scale=None, vector_type='POINT'):
        """ Node 'Mapping' (ShaderNodeMapping)
        - vector_type in ('POINT', 'TEXTURE', 'VECTOR', 'NORMAL')
        """

        node = Node('Mapping', {'Vector': vector, 'Location': location, 'Rotation': rotation, 'Scale': scale}, vector_type=vector_type)
        return node._out


    @classmethod
    def math(cls, value=None, value_1=None, operation='ADD', use_clamp=False):
        """ Node 'Math' (ShaderNodeMath)
        - operation in ('ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'MULTIPLY_ADD', 'POWER', 'LOGARITHM', 'SQRT', 'INVERSE_SQRT', 'ABSOLUTE', 'EXPONENT', 'MINIMUM', 'MAXIMUM', 'LESS_THAN', 'GREATER_THAN', 'SIGN', 'COMPARE', 'SMOOTH_MIN', 'SMOOTH_MAX', 'ROUND', 'FLOOR', 'CEIL', 'TRUNC', 'FRACT', 'MODULO', 'FLOORED_MODULO', 'WRAP', 'SNAP', 'PINGPONG', 'SINE', 'COSINE', 'TANGENT', 'ARCSINE', 'ARCCOSINE', 'ARCTANGENT', 'ARCTAN2', 'SINH', 'COSH', 'TANH', 'RADIANS', 'DEGREES')
        """

        node = Node('Math', {'Value': value, 'Value_001': value_1}, operation=operation, use_clamp=use_clamp)
        return node._out


    @classmethod
    def mix(cls, factor=None, a=None, b=None, blend_type='MIX', clamp_factor=True, clamp_result=False, data_type='FLOAT', factor_mode='UNIFORM'):
        """ Node 'Mix' (ShaderNodeMix)
        - blend_type in ('MIX', 'DARKEN', 'MULTIPLY', 'BURN', 'LIGHTEN', 'SCREEN', 'DODGE', 'ADD', 'OVERLAY', 'SOFT_LIGHT', 'LINEAR_LIGHT', 'DIFFERENCE', 'EXCLUSION', 'SUBTRACT', 'DIVIDE', 'HUE', 'SATURATION', 'COLOR', 'VALUE')
        - data_type in ('FLOAT', 'VECTOR', 'RGBA')
        - factor_mode in ('UNIFORM', 'NON_UNIFORM')
        """

        node = Node('Mix', {'Factor_Float': factor, 'A_Float': a, 'B_Float': b}, blend_type=blend_type, clamp_factor=clamp_factor, clamp_result=clamp_result, data_type=data_type, factor_mode=factor_mode)
        return node


    @classmethod
    def mix_shader(cls, fac=None, shader=None, shader_1=None):
        """ Node 'Mix Shader' (ShaderNodeMixShader)
        """

        node = Node('Mix Shader', {'Fac': fac, 'Shader': shader, 'Shader_001': shader_1})
        return node._out


    @classmethod
    @property
    def geometry(cls):
        """ Node 'Geometry' (ShaderNodeNewGeometry)
        """

        node = Node('Geometry')
        return node


    @classmethod
    def normal(cls, normal=None):
        """ Node 'Normal' (ShaderNodeNormal)
        """

        node = Node('Normal', {'Normal': normal})
        return node


    @classmethod
    def normal_map(cls, strength=None, color=None, space='TANGENT', uv_map=''):
        """ Node 'Normal Map' (ShaderNodeNormalMap)
        - space in ('TANGENT', 'OBJECT', 'WORLD', 'BLENDER_OBJECT', 'BLENDER_WORLD')
        """

        node = Node('Normal Map', {'Strength': strength, 'Color': color}, space=space, uv_map=uv_map)
        return node._out


    @classmethod
    @property
    def object_info(cls):
        """ Node 'Object Info' (ShaderNodeObjectInfo)
        """

        node = Node('Object Info')
        return node


    @classmethod
    def aov_output(cls, color=None, value=None, aov_name=''):
        """ Node 'AOV Output' (ShaderNodeOutputAOV)
        """

        node = Node('AOV Output', {'Color': color, 'Value': value}, aov_name=aov_name)
        return node._out


    @classmethod
    def light_output(cls, surface=None, is_active_output=True, target='ALL'):
        """ Node 'Light Output' (ShaderNodeOutputLight)
        - target in ('ALL', 'EEVEE', 'CYCLES')
        """

        node = Node('Light Output', {'Surface': surface}, is_active_output=is_active_output, target=target)
        return node._out


    @classmethod
    def line_style_output(cls, color=None, color_fac=None, alpha=None, alpha_fac=None, blend_type='MIX', is_active_output=True, target='ALL', use_alpha=False, use_clamp=False):
        """ Node 'Line Style Output' (ShaderNodeOutputLineStyle)
        - blend_type in ('MIX', 'DARKEN', 'MULTIPLY', 'BURN', 'LIGHTEN', 'SCREEN', 'DODGE', 'ADD', 'OVERLAY', 'SOFT_LIGHT', 'LINEAR_LIGHT', 'DIFFERENCE', 'EXCLUSION', 'SUBTRACT', 'DIVIDE', 'HUE', 'SATURATION', 'COLOR', 'VALUE')
        - target in ('ALL', 'EEVEE', 'CYCLES')
        """

        node = Node('Line Style Output', {'Color': color, 'Color Fac': color_fac, 'Alpha': alpha, 'Alpha Fac': alpha_fac}, blend_type=blend_type, is_active_output=is_active_output, target=target, use_alpha=use_alpha, use_clamp=use_clamp)
        return node._out


    @classmethod
    def material_output(cls, surface=None, volume=None, displacement=None, thickness=None, is_active_output=True, target='ALL'):
        """ Node 'Material Output' (ShaderNodeOutputMaterial)
        - target in ('ALL', 'EEVEE', 'CYCLES')
        """

        node = Node('Material Output', {'Surface': surface, 'Volume': volume, 'Displacement': displacement, 'Thickness': thickness}, is_active_output=is_active_output, target=target)
        return node._out


    @classmethod
    def world_output(cls, surface=None, volume=None, is_active_output=True, target='ALL'):
        """ Node 'World Output' (ShaderNodeOutputWorld)
        - target in ('ALL', 'EEVEE', 'CYCLES')
        """

        node = Node('World Output', {'Surface': surface, 'Volume': volume}, is_active_output=is_active_output, target=target)
        return node._out


    @classmethod
    @property
    def particle_info(cls):
        """ Node 'Particle Info' (ShaderNodeParticleInfo)
        """

        node = Node('Particle Info')
        return node


    @classmethod
    @property
    def point_info(cls):
        """ Node 'Point Info' (ShaderNodePointInfo)
        """

        node = Node('Point Info')
        return node


    @classmethod
    @property
    def rgb(cls):
        """ Node 'RGB' (ShaderNodeRGB)
        """

        node = Node('RGB')
        return node._out


    @classmethod
    def rgb_curves(cls, fac=None, color=None, mapping=None):
        """ Node 'RGB Curves' (ShaderNodeRGBCurve)
        """

        node = Node('RGB Curves', {'Fac': fac, 'Color': color}, mapping=mapping)
        return node._out


    @classmethod
    def rgb_to_bw(cls, color=None):
        """ Node 'RGB to BW' (ShaderNodeRGBToBW)
        """

        node = Node('RGB to BW', {'Color': color})
        return node._out


    @classmethod
    def script(cls, bytecode='', bytecode_hash='', filepath='', mode='INTERNAL', script=None, use_auto_update=False):
        """ Node 'Script' (ShaderNodeScript)
        - mode in ('INTERNAL', 'EXTERNAL')
        """

        node = Node('Script', bytecode=bytecode, bytecode_hash=bytecode_hash, filepath=filepath, mode=mode, script=script, use_auto_update=use_auto_update)
        return node._out


    @classmethod
    def separate_color(cls, color=None, mode='RGB'):
        """ Node 'Separate Color' (ShaderNodeSeparateColor)
        - mode in ('RGB', 'HSV', 'HSL')
        """

        node = Node('Separate Color', {'Color': color}, mode=mode)
        return node


    @classmethod
    def separate_xyz(cls, vector=None):
        """ Node 'Separate XYZ' (ShaderNodeSeparateXYZ)
        """

        node = Node('Separate XYZ', {'Vector': vector})
        return node


    @classmethod
    def shader_to_rgb(cls, shader=None):
        """ Node 'Shader to RGB' (ShaderNodeShaderToRGB)
        """

        node = Node('Shader to RGB', {'Shader': shader})
        return node


    @classmethod
    def subsurface_scattering(cls, color=None, scale=None, radius=None, ior=None, roughness=None, anisotropy=None, normal=None, falloff='RANDOM_WALK'):
        """ Node 'Subsurface Scattering' (ShaderNodeSubsurfaceScattering)
        - falloff in ('BURLEY', 'RANDOM_WALK', 'RANDOM_WALK_SKIN')
        """

        node = Node('Subsurface Scattering', {'Color': color, 'Scale': scale, 'Radius': radius, 'IOR': ior, 'Roughness': roughness, 'Anisotropy': anisotropy, 'Normal': normal}, falloff=falloff)
        return node._out


    @classmethod
    def tangent(cls, axis='Z', direction_type='RADIAL', uv_map=''):
        """ Node 'Tangent' (ShaderNodeTangent)
        - axis in ('X', 'Y', 'Z')
        - direction_type in ('RADIAL', 'UV_MAP')
        """

        node = Node('Tangent', axis=axis, direction_type=direction_type, uv_map=uv_map)
        return node._out


    @classmethod
    def brick_texture(cls, vector=None, color1=None, color2=None, mortar=None, scale=None, mortar_size=None, mortar_smooth=None, bias=None, brick_width=None, row_height=None, color_mapping=None, offset=0.5, offset_frequency=2, squash=1.0, squash_frequency=2, texture_mapping=None):
        """ Node 'Brick Texture' (ShaderNodeTexBrick)
        """

        node = Node('Brick Texture', {'Vector': vector, 'Color1': color1, 'Color2': color2, 'Mortar': mortar, 'Scale': scale, 'Mortar Size': mortar_size, 'Mortar Smooth': mortar_smooth, 'Bias': bias, 'Brick Width': brick_width, 'Row Height': row_height}, color_mapping=color_mapping, offset=offset, offset_frequency=offset_frequency, squash=squash, squash_frequency=squash_frequency, texture_mapping=texture_mapping)
        return node


    @classmethod
    def checker_texture(cls, vector=None, color1=None, color2=None, scale=None, color_mapping=None, texture_mapping=None):
        """ Node 'Checker Texture' (ShaderNodeTexChecker)
        """

        node = Node('Checker Texture', {'Vector': vector, 'Color1': color1, 'Color2': color2, 'Scale': scale}, color_mapping=color_mapping, texture_mapping=texture_mapping)
        return node


    @classmethod
    def texture_coordinate(cls, from_instancer=False, object=None):
        """ Node 'Texture Coordinate' (ShaderNodeTexCoord)
        """

        node = Node('Texture Coordinate', from_instancer=from_instancer, object=get_object(object))
        return node


    @classmethod
    def environment_texture(cls, vector=None, color_mapping=None, image=None, image_user=None, interpolation='Linear', projection='EQUIRECTANGULAR', texture_mapping=None):
        """ Node 'Environment Texture' (ShaderNodeTexEnvironment)
        - interpolation in ('Linear', 'Closest', 'Cubic', 'Smart')
        - projection in ('EQUIRECTANGULAR', 'MIRROR_BALL')
        """

        node = Node('Environment Texture', {'Vector': vector}, color_mapping=color_mapping, image=image, image_user=image_user, interpolation=interpolation, projection=projection, texture_mapping=texture_mapping)
        return node._out


    @classmethod
    def gradient_texture(cls, vector=None, color_mapping=None, gradient_type='LINEAR', texture_mapping=None):
        """ Node 'Gradient Texture' (ShaderNodeTexGradient)
        - gradient_type in ('LINEAR', 'QUADRATIC', 'EASING', 'DIAGONAL', 'SPHERICAL', 'QUADRATIC_SPHERE', 'RADIAL')
        """

        node = Node('Gradient Texture', {'Vector': vector}, color_mapping=color_mapping, gradient_type=gradient_type, texture_mapping=texture_mapping)
        return node


    @classmethod
    def ies_texture(cls, vector=None, strength=None, filepath='', ies=None, mode='INTERNAL'):
        """ Node 'IES Texture' (ShaderNodeTexIES)
        - mode in ('INTERNAL', 'EXTERNAL')
        """

        node = Node('IES Texture', {'Vector': vector, 'Strength': strength}, filepath=filepath, ies=ies, mode=mode)
        return node._out


    @classmethod
    def image_texture(cls, vector=None, color_mapping=None, extension='REPEAT', image=None, image_user=None, interpolation='Linear', projection='FLAT', projection_blend=0.0, texture_mapping=None):
        """ Node 'Image Texture' (ShaderNodeTexImage)
        - extension in ('REPEAT', 'EXTEND', 'CLIP', 'MIRROR')
        - interpolation in ('Linear', 'Closest', 'Cubic', 'Smart')
        - projection in ('FLAT', 'BOX', 'SPHERE', 'TUBE')
        """

        node = Node('Image Texture', {'Vector': vector}, color_mapping=color_mapping, extension=extension, image=image, image_user=image_user, interpolation=interpolation, projection=projection, projection_blend=projection_blend, texture_mapping=texture_mapping)
        return node


    @classmethod
    def magic_texture(cls, vector=None, scale=None, distortion=None, color_mapping=None, texture_mapping=None, turbulence_depth=2):
        """ Node 'Magic Texture' (ShaderNodeTexMagic)
        """

        node = Node('Magic Texture', {'Vector': vector, 'Scale': scale, 'Distortion': distortion}, color_mapping=color_mapping, texture_mapping=texture_mapping, turbulence_depth=turbulence_depth)
        return node


    @classmethod
    def noise_texture(cls, vector=None, scale=None, detail=None, roughness=None, lacunarity=None, distortion=None, color_mapping=None, noise_dimensions='3D', noise_type='FBM', normalize=True, texture_mapping=None):
        """ Node 'Noise Texture' (ShaderNodeTexNoise)
        - noise_dimensions in ('1D', '2D', '3D', '4D')
        - noise_type in ('MULTIFRACTAL', 'RIDGED_MULTIFRACTAL', 'HYBRID_MULTIFRACTAL', 'FBM', 'HETERO_TERRAIN')
        """

        node = Node('Noise Texture', {'Vector': vector, 'Scale': scale, 'Detail': detail, 'Roughness': roughness, 'Lacunarity': lacunarity, 'Distortion': distortion}, color_mapping=color_mapping, noise_dimensions=noise_dimensions, noise_type=noise_type, normalize=normalize, texture_mapping=texture_mapping)
        return node


    @classmethod
    def point_density(cls, vector=None, cache_point_density=None, calc_point_density=None, calc_point_density_minmax=None, interpolation='Linear', object=None, particle_color_source='PARTICLE_AGE', particle_system=None, point_source='PARTICLE_SYSTEM', radius=0.30000001192092896, resolution=100, space='OBJECT', vertex_attribute_name='', vertex_color_source='VERTEX_COLOR'):
        """ Node 'Point Density' (ShaderNodeTexPointDensity)
        - interpolation in ('Closest', 'Linear', 'Cubic')
        - particle_color_source in ('PARTICLE_AGE', 'PARTICLE_SPEED', 'PARTICLE_VELOCITY')
        - point_source in ('PARTICLE_SYSTEM', 'OBJECT')
        - space in ('OBJECT', 'WORLD')
        - vertex_color_source in ('VERTEX_COLOR', 'VERTEX_WEIGHT', 'VERTEX_NORMAL')
        """

        node = Node('Point Density', {'Vector': vector}, cache_point_density=cache_point_density, calc_point_density=calc_point_density, calc_point_density_minmax=calc_point_density_minmax, interpolation=interpolation, object=get_object(object), particle_color_source=particle_color_source, particle_system=particle_system, point_source=point_source, radius=radius, resolution=resolution, space=space, vertex_attribute_name=vertex_attribute_name, vertex_color_source=vertex_color_source)
        return node


    @classmethod
    def sky_texture(cls, air_density=1.0, altitude=0.0, color_mapping=None, dust_density=1.0, ground_albedo=0.30000001192092896, ozone_density=1.0, sky_type='NISHITA', sun_direction=None, sun_disc=True, sun_elevation=0.2617993950843811, sun_intensity=1.0, sun_rotation=0.0, sun_size=0.009512044489383698, texture_mapping=None, turbidity=2.200000047683716):
        """ Node 'Sky Texture' (ShaderNodeTexSky)
        - sky_type in ('PREETHAM', 'HOSEK_WILKIE', 'NISHITA')
        """

        node = Node('Sky Texture', air_density=air_density, altitude=altitude, color_mapping=color_mapping, dust_density=dust_density, ground_albedo=ground_albedo, ozone_density=ozone_density, sky_type=sky_type, sun_direction=sun_direction, sun_disc=sun_disc, sun_elevation=sun_elevation, sun_intensity=sun_intensity, sun_rotation=sun_rotation, sun_size=sun_size, texture_mapping=texture_mapping, turbidity=turbidity)
        return node._out


    @classmethod
    def voronoi_texture(cls, vector=None, scale=None, detail=None, roughness=None, lacunarity=None, randomness=None, color_mapping=None, distance='EUCLIDEAN', feature='F1', normalize=False, texture_mapping=None, voronoi_dimensions='3D'):
        """ Node 'Voronoi Texture' (ShaderNodeTexVoronoi)
        - distance in ('EUCLIDEAN', 'MANHATTAN', 'CHEBYCHEV', 'MINKOWSKI')
        - feature in ('F1', 'F2', 'SMOOTH_F1', 'DISTANCE_TO_EDGE', 'N_SPHERE_RADIUS')
        - voronoi_dimensions in ('1D', '2D', '3D', '4D')
        """

        node = Node('Voronoi Texture', {'Vector': vector, 'Scale': scale, 'Detail': detail, 'Roughness': roughness, 'Lacunarity': lacunarity, 'Randomness': randomness}, color_mapping=color_mapping, distance=distance, feature=feature, normalize=normalize, texture_mapping=texture_mapping, voronoi_dimensions=voronoi_dimensions)
        return node


    @classmethod
    def wave_texture(cls, vector=None, scale=None, distortion=None, detail=None, detail_scale=None, detail_roughness=None, phase_offset=None, bands_direction='X', color_mapping=None, rings_direction='X', texture_mapping=None, wave_profile='SIN', wave_type='BANDS'):
        """ Node 'Wave Texture' (ShaderNodeTexWave)
        - bands_direction in ('X', 'Y', 'Z', 'DIAGONAL')
        - rings_direction in ('X', 'Y', 'Z', 'SPHERICAL')
        - wave_profile in ('SIN', 'SAW', 'TRI')
        - wave_type in ('BANDS', 'RINGS')
        """

        node = Node('Wave Texture', {'Vector': vector, 'Scale': scale, 'Distortion': distortion, 'Detail': detail, 'Detail Scale': detail_scale, 'Detail Roughness': detail_roughness, 'Phase Offset': phase_offset}, bands_direction=bands_direction, color_mapping=color_mapping, rings_direction=rings_direction, texture_mapping=texture_mapping, wave_profile=wave_profile, wave_type=wave_type)
        return node


    @classmethod
    def white_noise_texture(cls, vector=None, noise_dimensions='3D'):
        """ Node 'White Noise Texture' (ShaderNodeTexWhiteNoise)
        - noise_dimensions in ('1D', '2D', '3D', '4D')
        """

        node = Node('White Noise Texture', {'Vector': vector}, noise_dimensions=noise_dimensions)
        return node


    @classmethod
    def uv_along_stroke(cls, use_tips=False):
        """ Node 'UV Along Stroke' (ShaderNodeUVAlongStroke)
        """

        node = Node('UV Along Stroke', use_tips=use_tips)
        return node._out


    @classmethod
    def uv_map(cls, from_instancer=False, uv_map=''):
        """ Node 'UV Map' (ShaderNodeUVMap)
        """

        node = Node('UV Map', from_instancer=from_instancer, uv_map=uv_map)
        return node._out


    @classmethod
    def color_ramp(cls, fac=None, color_ramp=None):
        """ Node 'Color Ramp' (ShaderNodeValToRGB)
        """

        node = Node('Color Ramp', {'Fac': fac}, color_ramp=color_ramp)
        return node


    @classmethod
    @property
    def value(cls):
        """ Node 'Value' (ShaderNodeValue)
        """

        node = Node('Value')
        return node._out


    @classmethod
    def vector_curves(cls, fac=None, vector=None, mapping=None):
        """ Node 'Vector Curves' (ShaderNodeVectorCurve)
        """

        node = Node('Vector Curves', {'Fac': fac, 'Vector': vector}, mapping=mapping)
        return node._out


    @classmethod
    def vector_displacement(cls, vector=None, midlevel=None, scale=None, space='TANGENT'):
        """ Node 'Vector Displacement' (ShaderNodeVectorDisplacement)
        - space in ('TANGENT', 'OBJECT', 'WORLD')
        """

        node = Node('Vector Displacement', {'Vector': vector, 'Midlevel': midlevel, 'Scale': scale}, space=space)
        return node._out


    @classmethod
    def vector_math(cls, vector=None, vector_1=None, operation='ADD'):
        """ Node 'Vector Math' (ShaderNodeVectorMath)
        - operation in ('ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'MULTIPLY_ADD', 'CROSS_PRODUCT', 'PROJECT', 'REFLECT', 'REFRACT', 'FACEFORWARD', 'DOT_PRODUCT', 'DISTANCE', 'LENGTH', 'SCALE', 'NORMALIZE', 'ABSOLUTE', 'MINIMUM', 'MAXIMUM', 'FLOOR', 'CEIL', 'FRACTION', 'MODULO', 'WRAP', 'SNAP', 'SINE', 'COSINE', 'TANGENT')
        """

        node = Node('Vector Math', {'Vector': vector, 'Vector_001': vector_1}, operation=operation)
        return node


    @classmethod
    def vector_rotate(cls, vector=None, center=None, axis=None, angle=None, invert=False, rotation_type='AXIS_ANGLE'):
        """ Node 'Vector Rotate' (ShaderNodeVectorRotate)
        - rotation_type in ('AXIS_ANGLE', 'X_AXIS', 'Y_AXIS', 'Z_AXIS', 'EULER_XYZ')
        """

        node = Node('Vector Rotate', {'Vector': vector, 'Center': center, 'Axis': axis, 'Angle': angle}, invert=invert, rotation_type=rotation_type)
        return node._out


    @classmethod
    def vector_transform(cls, vector=None, convert_from='WORLD', convert_to='OBJECT', vector_type='VECTOR'):
        """ Node 'Vector Transform' (ShaderNodeVectorTransform)
        - convert_from in ('WORLD', 'OBJECT', 'CAMERA')
        - convert_to in ('WORLD', 'OBJECT', 'CAMERA')
        - vector_type in ('POINT', 'VECTOR', 'NORMAL')
        """

        node = Node('Vector Transform', {'Vector': vector}, convert_from=convert_from, convert_to=convert_to, vector_type=vector_type)
        return node._out


    @classmethod
    def color_attribute(cls, layer_name=''):
        """ Node 'Color Attribute' (ShaderNodeVertexColor)
        """

        node = Node('Color Attribute', layer_name=layer_name)
        return node


    @classmethod
    def volume_absorption(cls, color=None, density=None):
        """ Node 'Volume Absorption' (ShaderNodeVolumeAbsorption)
        """

        node = Node('Volume Absorption', {'Color': color, 'Density': density})
        return node._out


    @classmethod
    @property
    def volume_info(cls):
        """ Node 'Volume Info' (ShaderNodeVolumeInfo)
        """

        node = Node('Volume Info')
        return node


    @classmethod
    def principled_volume(cls, color=None, color_attribute=None, density=None, density_attribute=None, anisotropy=None, absorption_color=None, emission_strength=None, emission_color=None, blackbody_intensity=None, blackbody_tint=None, temperature=None, temperature_attribute=None):
        """ Node 'Principled Volume' (ShaderNodeVolumePrincipled)
        """

        node = Node('Principled Volume', {'Color': color, 'Color Attribute': color_attribute, 'Density': density, 'Density Attribute': density_attribute, 'Anisotropy': anisotropy, 'Absorption Color': absorption_color, 'Emission Strength': emission_strength, 'Emission Color': emission_color, 'Blackbody Intensity': blackbody_intensity, 'Blackbody Tint': blackbody_tint, 'Temperature': temperature, 'Temperature Attribute': temperature_attribute})
        return node._out


    @classmethod
    def volume_scatter(cls, color=None, density=None, anisotropy=None):
        """ Node 'Volume Scatter' (ShaderNodeVolumeScatter)
        """

        node = Node('Volume Scatter', {'Color': color, 'Density': density, 'Anisotropy': anisotropy})
        return node._out


    @classmethod
    def wavelength(cls, wavelength=None):
        """ Node 'Wavelength' (ShaderNodeWavelength)
        """

        node = Node('Wavelength', {'Wavelength': wavelength})
        return node._out


    @classmethod
    def wireframe(cls, size=None, use_pixel_size=False):
        """ Node 'Wireframe' (ShaderNodeWireframe)
        """

        node = Node('Wireframe', {'Size': size}, use_pixel_size=use_pixel_size)
        return node._out
